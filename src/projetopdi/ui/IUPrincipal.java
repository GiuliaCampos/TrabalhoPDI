/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetopdi.ui;

import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import projetopdi.MetodosCinza;
import projetopdi.MetodosColorido;
import projetopdi.Rgb;

/**
 *
 * @author Giulia
 */
public class IUPrincipal extends javax.swing.JFrame {
    MetodosCinza metodos = new MetodosCinza();
    MetodosColorido metodos2 = new MetodosColorido();
    private boolean pgmPPM; //se pgm 0 senao 1 (ppm)
    public BufferedImage imagem_pgm;
    private int nLinhas, nColunas;
    private int nLinhasNova, nColunasNova;
    
    /**
     * Creates new form IUPrincipal
     */
    public IUPrincipal() {
        initComponents();
        menuCinza_.setEnabled(false);
        menuRGB_.setEnabled(false);
        metodoSelecionadoCinza.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        menuCinza_ = new javax.swing.JMenu();
        menuRGB_ = new javax.swing.JMenu();
        fileChooserR = new javax.swing.JFileChooser();
        fileChooserG = new javax.swing.JFileChooser();
        fileChooserB = new javax.swing.JFileChooser();
        metodoSelecionadoCinza = new javax.swing.JComboBox<>();
        confirmarButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel_imagem = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel_imagemResultado = new javax.swing.JLabel();
        salvarArquivo = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        sair = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Escolher arquivo");

        menuCinza_.setText("jMenu2");

        menuRGB_.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        metodoSelecionadoCinza.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escurecer Imagem", "Clarear Imagem", "Girar Imagem", "Tornar Negativo", "Fatiamento", "Transf. Gama", "Flip Horizontal", "Equalização de Histograma" }));
        metodoSelecionadoCinza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodoSelecionadoCinzaActionPerformed(evt);
            }
        });

        confirmarButton.setText("Confirmar");
        confirmarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jLabel_imagem);

        jScrollPane2.setViewportView(jLabel_imagemResultado);

        salvarArquivo.setText("Salvar em Arquivo");
        salvarArquivo.setEnabled(false);
        salvarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarArquivoActionPerformed(evt);
            }
        });

        jMenu1.setText("Menu");

        abrir.setText("Abrir imagem");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        jMenu1.add(sair);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(metodoSelecionadoCinza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(confirmarButton)
                        .addGap(46, 46, 46)
                        .addComponent(salvarArquivo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metodoSelecionadoCinza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmarButton)
                    .addComponent(salvarArquivo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser jFile = new JFileChooser();
        int returnVal = jFile.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFile.getSelectedFile();
            String a[] = file.getAbsolutePath().split("\\.");
            
            //P2 e P5
            if("pgm".equals(a[a.length-1])){
                menuRGB_.setEnabled(false);
                pgmPPM = false;
                try {
                    metodos = new MetodosCinza(file.getAbsolutePath());
                    nLinhas = metodos.getnLinhas();
                    nColunas = metodos.getnColunas();
                    
                    exibirImagemCinza(metodos.getMatriz());
                    metodoSelecionadoCinza.setEnabled(true);
                    menuCinza_.setEnabled(true);
                } catch (IOException ex) {
                    System.out.println("problem accessing file"+file.getAbsolutePath());
                }
            }
            //P3 e P6
            else if("ppm".equals(a[a.length-1])){;
                menuCinza_.setEnabled(false);
                pgmPPM = true;
                try {
                    metodos2 = new MetodosColorido(file.getAbsolutePath());
                    nLinhas = metodos2.getnLinhas();
                    nColunas = metodos2.getnColunas();
                    metodoSelecionadoCinza.setEnabled(false);
                    
                    //exibirImagemCinza(metodos.getMatriz());
                    //menuCinza_.setEnabled(true);
                } catch (IOException ex) {
                    System.out.println("problem accessing file"+file.getAbsolutePath());
                }
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_sairActionPerformed

    private void confirmarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarButtonActionPerformed
        //Escurecer Imagem
        //Clarear Imagem
        //Girar Imagem
        //Tornar Negativo
        //Colorido - Cinza
        //Cinza - Colorido
        //Fatiamento
        //Transf. Gama
        //Flip Horizontal
        //Equalização de Histograma

        String resultado = (String) metodoSelecionadoCinza.getSelectedItem();
        String nomeArquivo;
        
        if((metodos.getnLinhas() > 1)||(metodos2.getnLinhas() > 1)){
            if(resultado == "Escurecer Imagem"){
                int valor = Integer.parseInt(JOptionPane.showInputDialog(this, "Entre com o valor para escurecer"));
                //verificar se valor é menor que limite
                if(valor > metodos.getLimite()){
                    JOptionPane.showMessageDialog(this, "O valor deve ser entre 0 e " + metodos.getLimite());
                }else{
                    metodos.escurecerMatriz(valor);
                    
                    nLinhasNova = metodos.getMatrizResultado().length;
                    nColunasNova = metodos.getMatrizResultado()[0].length;
                    exibirImagemCinzaResultado(metodos.getMatrizResultado());
                }
            }else if(resultado == "Clarear Imagem"){
                int valor = Integer.parseInt(JOptionPane.showInputDialog(this, "Entre com o valor para clarear"));
                
                if(valor > metodos.getLimite()){
                    JOptionPane.showMessageDialog(this, "O valor deve ser entre 0 e " + metodos.getLimite());
                }else{
                    metodos.clarearMatriz(valor);
                    
                    nLinhasNova = metodos.getMatrizResultado().length;
                    nColunasNova = metodos.getMatrizResultado()[0].length;
                    exibirImagemCinzaResultado(metodos.getMatrizResultado());
                }
                
            }else if(resultado == "Girar Imagem"){
                int numero = Integer.parseInt(JOptionPane.showInputDialog(this, "Entre com o valor para girar: "));
                
                while((numero != 90) || (numero != -90) || (numero != 180)){
                    JOptionPane.showMessageDialog(this, "Valor deve ser: 90, -90 ou 180");
                    numero = Integer.parseInt(JOptionPane.showInputDialog(this, "Entre com o valor para girar: "));
                    if( (numero == 90) || (numero == -90) || (numero == 180)) break;
                }
                
                metodos.girarMatriz(numero);
                
                nLinhasNova = metodos.getMatrizResultado().length;
                nColunasNova = metodos.getMatrizResultado()[0].length;
                exibirImagemCinzaResultado(metodos.getMatrizResultado());
            }else if(resultado == "Tornar Negativo"){
                metodos.negativoMatriz();
                
                nLinhasNova = metodos.getMatrizResultado().length;
                nColunasNova = metodos.getMatrizResultado()[0].length;
                exibirImagemCinzaResultado(metodos.getMatrizResultado());
            }
            else if(resultado == "Fatiamento"){
                int a, b, novaTonalidadeIntervalo;
                boolean aux = true;
                a = b = novaTonalidadeIntervalo = 0;
                while(aux){
                    a = Integer.parseInt(JOptionPane.showInputDialog(this, "Entre com o valor de 'a': "));
                    if((a > metodos.getLimite()) || (a < 0)){
                        a = Integer.parseInt(JOptionPane.showInputDialog(this, "Valor deve ser entre 0 e " + metodos.getLimite()));
                    }
                    else aux = false;
                }
                
                aux = true;
                while(aux){
                    b = Integer.parseInt(JOptionPane.showInputDialog(this, "Entre com o valor de 'b': "));
                    if((b > metodos.getLimite())||(b < 0)){
                        b = Integer.parseInt(JOptionPane.showInputDialog(this, "Valor deve ser entre 0 e " + metodos.getLimite()));
                    }
                    else aux = false;
                }
                
                aux = true;
                while(aux){
                    novaTonalidadeIntervalo = Integer.parseInt(JOptionPane.showInputDialog(this, "Valor da nova tonalidade: "));
                    if((novaTonalidadeIntervalo > metodos.getLimite())||(novaTonalidadeIntervalo < 0)){
                        novaTonalidadeIntervalo = Integer.parseInt(JOptionPane.showInputDialog(this, 
                                "Valor deve ser entre 0 e " + metodos.getLimite()));
                    }
                    else aux = false;
                }
                
                metodos.fatiamentoImagem(a, b, novaTonalidadeIntervalo);
                nLinhasNova = metodos.getMatrizResultado().length;
                nColunasNova = metodos.getMatrizResultado()[0].length;
                exibirImagemCinzaResultado(metodos.getMatrizResultado());
            }
            else if(resultado == "Transf. Gama"){
                float c, gama;
                c = Float.valueOf(JOptionPane.showInputDialog(this, "Valor de c: "));
                gama = Float.valueOf(JOptionPane.showInputDialog(this, "Valor de gama: "));
                
                metodos.transfGama(c, gama);
                nLinhasNova = metodos.getMatrizResultado().length;
                nColunasNova = metodos.getMatrizResultado()[0].length;
                exibirImagemCinzaResultado(metodos.getMatrizResultado());
            }
            else if(resultado == "Flip Horizontal"){
                metodos.flipHorizontal();
                nLinhasNova = metodos.getMatrizResultado().length;
                nColunasNova = metodos.getMatrizResultado()[0].length;
                exibirImagemCinzaResultado(metodos.getMatrizResultado());
            }
            else if(resultado == "Equalização de Histograma"){
                metodos.histograma();
                nLinhasNova = metodos.getMatrizResultado().length;
                nColunasNova = metodos.getMatrizResultado()[0].length;
                exibirImagemCinzaResultado(metodos.getMatrizResultado());
            }
            else if(resultado == "Colorido - Cinza"){
                if(metodos2.getnLinhas() > 1){
                    int matrizR[][] = new int[metodos2.getnLinhas()][metodos2.getnColunas()];
                    int matrizG[][] = new int[metodos2.getnLinhas()][metodos2.getnColunas()];
                    int matrizB[][] = new int[metodos2.getnLinhas()][metodos2.getnColunas()];
                    
                    for(int i = 0; i < metodos2.getnLinhas(); i++){
                        for(int j = 0; j < metodos2.getnColunas(); j++){
                            matrizR[i][j] = metodos2.getMatriz()[i][j].getR();
                            matrizG[i][j] = metodos2.getMatriz()[i][j].getG();
                            matrizB[i][j] = metodos2.getMatriz()[i][j].getB();
                        }
                    }
                    
                    String nomeArquivoVermelho = JOptionPane.showInputDialog("Nome arquivo escala vermelho");
                    String nomeArquivoVerde = JOptionPane.showInputDialog("Nome arquivo escala verde");
                    String nomeArquivoAzul = JOptionPane.showInputDialog("Nome arquivo escala azul");
                    
                    String caminho =  "C:\\Users\\Giulia\\Documents\\Unesp\\PDI\\";

                    PrintWriter pwR = null;
                    PrintWriter pwG = null;
                    PrintWriter pwB = null;
                    
                    try {
                        pwR = new PrintWriter(nomeArquivoVermelho + ".pgm");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(IUPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        pwG = new PrintWriter(nomeArquivoVerde + ".pgm");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(IUPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        pwB = new PrintWriter(nomeArquivoAzul + ".pgm");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(IUPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //Cabeçalho:
                    //P2 (PGM)
                    //nLinha Ncoluna
                    //limite (0 - 255)
                    pwR.print("P2\n"+ metodos2.getnLinhas() +" "+ metodos2.getnColunas() +"\n"+ metodos2.getLimite() +"\n");
                    pwG.print("P2\n"+ metodos2.getnLinhas() +" "+ metodos2.getnColunas() +"\n"+ metodos2.getLimite() +"\n");
                    pwB.print("P2\n"+ metodos2.getnLinhas() +" "+ metodos2.getnColunas() +"\n"+ metodos2.getLimite() +"\n");

                    for(int i = 0; i < metodos2.getnLinhas(); i++){
                        for(int j = 0; j < metodos2.getnColunas(); j++){
                            pwR.print(matrizR[i][j] + "\n");
                            pwG.print(matrizG[i][j] + "\n");
                            pwB.print(matrizB[i][j] + "\n");
                        }
                    }
                    pwR.close();
                    pwG.close();
                    pwB.close();
                    
                }else JOptionPane.showMessageDialog(this, "Abra um arquivo ppm antes");
            }
            else if(resultado == "Cinza - Colorido"){
                int returnValR = fileChooserR.showOpenDialog(this);
                int returnValG = fileChooserG.showOpenDialog(this);
                int returnValB = fileChooserB.showOpenDialog(this);
        
                if ((returnValR == JFileChooser.APPROVE_OPTION) && (returnValG == JFileChooser.APPROVE_OPTION) && (returnValB == JFileChooser.APPROVE_OPTION) ){
                
                    File fileVermelho = fileChooserR.getSelectedFile();
                    File fileVerde = fileChooserG.getSelectedFile();
                    File fileAzul = fileChooserB.getSelectedFile();
                    String nomeArquivoVermelho = fileVermelho.getAbsolutePath();
                    String nomeArquivoVerde = fileVerde.getAbsolutePath();
                    String nomeArquivoAzul = fileAzul.getAbsolutePath();

                    String linhaR = "";
                    String linhaG = "";
                    String linhaB = "";

                    //Tipo do arquivo (P1 == ASC PBM) (P2 == ASC PGM) (P3 == ASC PPM) (P4 == BIN PBM) (P5 == BIN PGM) (P6 == BIN PPM)
                    BufferedReader buffReadR = null;
                    BufferedReader buffReadG = null;
                    BufferedReader buffReadB = null;

                    try {
                        buffReadR = new BufferedReader(new FileReader(nomeArquivoVermelho));
                        linhaR = buffReadR.readLine(); //Tipo

                        buffReadG = new BufferedReader(new FileReader(nomeArquivoVerde));
                        linhaG = buffReadG.readLine();

                        buffReadB = new BufferedReader(new FileReader(nomeArquivoAzul));
                        linhaB = buffReadB.readLine();

                        linhaR = buffReadR.readLine(); //Dimensão
                        linhaG = buffReadG.readLine();
                        linhaB = buffReadB.readLine();

                        nLinhas = Integer.parseInt(linhaR.split(" ")[0]);
                        nColunas = Integer.parseInt(linhaR.split(" ")[1]);

                        linhaR = buffReadR.readLine(); //Limite
                        linhaG = buffReadG.readLine();
                        linhaB = buffReadB.readLine();

                        int limite = Integer.parseInt(linhaR);

                        Rgb[][] matriz = new Rgb[nLinhas][nColunas];

                        for(int i = 0; i < nLinhas; i++){
                            for(int j = 0; j < nColunas; j++){
                                Rgb novo = new Rgb();
                                linhaR = buffReadR.readLine();
                                linhaG = buffReadG.readLine();
                                linhaB = buffReadB.readLine();

                                novo.setR(Integer.parseInt(linhaR));
                                novo.setG(Integer.parseInt(linhaG));
                                novo.setB(Integer.parseInt(linhaB));

                                matriz[i][j] = novo;
                            }
                        }

                        for(int i = 0; i < nLinhas; i++){
                            for(int j = 0; j < nColunas; j++){
                                System.out.println("Linha: " + i + " Coluna: " + j);
                                System.out.println("R: " + matriz[i][j].getR());
                                System.out.println("G: " + matriz[i][j].getG());
                                System.out.println("B: " + matriz[i][j].getB());
                            }
                        }

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(IUPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(IUPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            salvarArquivo.setEnabled(true);
        }else{
            JOptionPane.showMessageDialog(this, "Abra um arquivo antes");
        }
        
    }//GEN-LAST:event_confirmarButtonActionPerformed

    private void metodoSelecionadoCinzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodoSelecionadoCinzaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metodoSelecionadoCinzaActionPerformed

    private void salvarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarArquivoActionPerformed
        String nomeArquivo;
        nomeArquivo = JOptionPane.showInputDialog(this, "Entre com o nome do novo arquivo (sem .pgm) ");
        
        try {
            metodos.escreverMatriz(nomeArquivo);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IUPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_salvarArquivoActionPerformed

    private void exibirImagemCinza(int matriz[][]){ 
        imagem_pgm = new BufferedImage(nColunas, nLinhas, BufferedImage.TYPE_BYTE_GRAY);
        WritableRaster raster = imagem_pgm.getRaster();
        int num;
        
        for(int i = 0; i < nLinhas; i++)
            for(int j = 0; j < nColunas; j++){
                num = matriz[i][j];
                raster.setSample(j, i, 0, num);
        }
        jScrollPane1.setSize(imagem_pgm.getWidth(), imagem_pgm.getHeight());           
        setSize(imagem_pgm.getWidth(), imagem_pgm.getHeight());        
        jLabel_imagem.setIcon(new ImageIcon(imagem_pgm));
    }
    
    private void exibirImagemCinzaResultado(int matriz[][]){ 
        imagem_pgm = new BufferedImage(nColunasNova, nLinhasNova, BufferedImage.TYPE_BYTE_GRAY);
        WritableRaster raster = imagem_pgm.getRaster();
        int num;

        for(int i = 0; i < nLinhasNova; i++)
            for(int j = 0; j < nColunasNova; j++){
                num = matriz[i][j];
                raster.setSample(j, i, 0, num);
        }
        jScrollPane2.setSize(imagem_pgm.getWidth(), imagem_pgm.getHeight());           
        setSize(imagem_pgm.getWidth(), imagem_pgm.getHeight());        
        jLabel_imagemResultado.setIcon(new ImageIcon(imagem_pgm));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IUPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IUPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IUPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IUPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IUPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JButton confirmarButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser fileChooserB;
    private javax.swing.JFileChooser fileChooserG;
    private javax.swing.JFileChooser fileChooserR;
    private javax.swing.JLabel jLabel_imagem;
    private javax.swing.JLabel jLabel_imagemResultado;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu menuCinza_;
    private javax.swing.JMenu menuRGB_;
    private javax.swing.JComboBox<String> metodoSelecionadoCinza;
    private javax.swing.JMenuItem sair;
    private javax.swing.JButton salvarArquivo;
    // End of variables declaration//GEN-END:variables
}
